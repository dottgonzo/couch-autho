"use strict";
var chai = require("chai");
var rpj = require('request-promise-json');
var index_1 = require("../index");
var spawnPouchdbServer = require('spawn-pouchdb-server');
var expect = chai.expect;
var should = chai.should;
var usercredentials = {};
var Server;
var db = __dirname + '/../.db';
var CouchAuth;
before(function (done) {
    this.timeout(10000);
    spawnPouchdbServer({
        port: 8741,
        backend: false,
        config: {
            admins: { "adminuser": "adminpass" },
            file: false
        },
        log: {
            file: false,
            level: 'info'
        }
    }, function (error, server) {
        if (error) {
            throw error;
        }
        else {
            Server = server;
            CouchAuth = new index_1.default({
                hostname: 'localhost',
                protocol: 'http',
                port: 8741,
                user: 'adminuser',
                password: 'adminpass'
            });
            setTimeout(function () {
                done();
            }, 5000);
        }
    });
});
describe("test user", function () {
    this.timeout(20000);
    it("verificate app_main db", function (done) {
        rpj.get(CouchAuth.my('app_main')).then(function (d) {
            expect(d.db_name).to.be.eq('app_main');
            done();
        }).catch(function (err) {
            done(Error(err));
        });
    });
    it("verificate that app_main is private", function (done) {
        rpj.get(CouchAuth.publink + '/app_main').then(function (d) {
            done(Error(d));
        }).catch(function (err) {
            console.log(err);
            expect(err).to.be.ok;
            done();
        });
    });
});
after(function (done) {
    Server.stop(function () {
        done();
    });
});

//# sourceMappingURL=data:application/json;base64,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Q0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNyQixJQUFJLEVBQUUsQ0FBQTtRQUNWLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFHUCxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxVQUFVLElBQUk7SUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNSLElBQUksRUFBRSxDQUFBO0lBQ1YsQ0FBQyxDQUFDLENBQUE7QUFFTixDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBtb2NoYSBmcm9tIFwibW9jaGFcIjtcbmltcG9ydCAqIGFzIGNoYWkgZnJvbSBcImNoYWlcIjtcblxubGV0IHJwaiA9IHJlcXVpcmUoJ3JlcXVlc3QtcHJvbWlzZS1qc29uJyk7XG5cbmltcG9ydCBjb3VjaGF1dGggZnJvbSBcIi4uL2luZGV4XCI7XG5cblxuY29uc3Qgc3Bhd25Qb3VjaGRiU2VydmVyID0gcmVxdWlyZSgnc3Bhd24tcG91Y2hkYi1zZXJ2ZXInKTtcblxuXG5cbmxldCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcblxubGV0IHNob3VsZCA9IGNoYWkuc2hvdWxkO1xuXG5sZXQgdXNlcmNyZWRlbnRpYWxzID0ge1xuXG59O1xuXG5cblxubGV0IFNlcnZlcjtcblxubGV0IGRiID0gX19kaXJuYW1lICsgJy8uLi8uZGInXG5cbmxldCBDb3VjaEF1dGg6IGNvdWNoYXV0aDtcblxuXG5cbmJlZm9yZShmdW5jdGlvbiAoZG9uZSkge1xuICAgIHRoaXMudGltZW91dCgxMDAwMCk7XG4gICAgc3Bhd25Qb3VjaGRiU2VydmVyKFxuICAgICAgICB7XG4gICAgICAgICAgICBwb3J0OiA4NzQxLFxuICAgICAgICAgICAgYmFja2VuZDogZmFsc2UsXG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICBhZG1pbnM6IHsgXCJhZG1pbnVzZXJcIjogXCJhZG1pbnBhc3NcIiB9LFxuICAgICAgICAgICAgICAgIGZpbGU6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9nOiB7XG4gICAgICAgICAgICAgICAgZmlsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgbGV2ZWw6ICdpbmZvJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIHNlcnZlcikge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgU2VydmVyID0gc2VydmVyXG4gICAgICAgICAgICAgICAgQ291Y2hBdXRoID0gbmV3IGNvdWNoYXV0aCh7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RuYW1lOiAnbG9jYWxob3N0JyxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6ICdodHRwJyxcbiAgICAgICAgICAgICAgICAgICAgcG9ydDogODc0MSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogJ2FkbWludXNlcicsXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAnYWRtaW5wYXNzJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBkb25lKClcbiAgICAgICAgICAgICAgICB9LCA1MDAwKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG59KTtcblxuLy8gd3JpdGUgdGVzdHMgYWJvdXQgbXVsdGlwbGUgdmFsdWVzICgyIGlwIG9yIDIgZ2F0ZXdheSBmb3IgdGhlIHNhbWUgaW50ZXJmYWNlKVxuZGVzY3JpYmUoXCJ0ZXN0IHVzZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudGltZW91dCgyMDAwMCk7XG5cbiAgICBpdChcInZlcmlmaWNhdGUgYXBwX21haW4gZGJcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgLy8gICAgY29uc29sZS5sb2coQ291Y2hBdXRoLm15KCdhcHBfbWFpbicpKVxuXG4gICAgICAgIHJwai5nZXQoQ291Y2hBdXRoLm15KCdhcHBfbWFpbicpKS50aGVuKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICBleHBlY3QoZC5kYl9uYW1lKS50by5iZS5lcSgnYXBwX21haW4nKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgZG9uZShFcnJvcihlcnIpKTtcbiAgICAgICAgfSlcbiAgICB9KTtcblxuICAgIGl0KFwidmVyaWZpY2F0ZSB0aGF0IGFwcF9tYWluIGlzIHByaXZhdGVcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgLy8gICAgY29uc29sZS5sb2coQ291Y2hBdXRoLm15KCdhcHBfbWFpbicpKVxuXG5cbiAgICAgICAgcnBqLmdldChDb3VjaEF1dGgucHVibGluayArICcvYXBwX21haW4nKS50aGVuKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICBkb25lKEVycm9yKGQpKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICAgICAgZXhwZWN0KGVycikudG8uYmUub2s7XG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSlcbiAgICB9KTtcblxuXG59KTtcblxuYWZ0ZXIoZnVuY3Rpb24gKGRvbmUpIHtcbiAgICBTZXJ2ZXIuc3RvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvbmUoKVxuICAgIH0pXG5cbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
